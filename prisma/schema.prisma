// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Session Session[]
  Account Account[]

  profile            Profile?
  createdGames       Game[]
  gameParticipations GameParticipation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Profile {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nickname     String
  level        Level
  acceptEmails Boolean

  @@unique([userId])
  @@map("profile")
}

enum Level {
  ONE
  TWO
  THREE
  THREE_PLUS
  FOUR
  FOUR_PLUS
  FIVE
  FIVE_PLUS
  SIX
  SIX_PLUS
  SEVEN
  EIGHT
  NINE
  TEN
}

model Game {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  creator           User                @relation(fields: [creatorUserId], references: [id], onDelete: Cascade)
  creatorUserId     String
  dateTime          DateTime
  durationInMinutes Int
  nbOfPlayersToFind Int
  description       String              @default("")
  level             Level
  padelComplexId    String
  padelComplex      PadelComplex        @relation(fields: [padelComplexId], references: [id], onDelete: Cascade)
  participations    GameParticipation[]
}

model GameParticipation {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String

  @@unique([userId, gameId])
}

model PadelComplex {
  id      String @id @default(cuid())
  name    String
  address String
  city    String
  zipCode String
  country String

  games Game[]
}
